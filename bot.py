import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, PhotoSize
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ---
BOT_TOKEN = "7987529802:AAFJrc31acKN86KDffq0SvE4dB1uA1EERlI"  # <--- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶®
ADMIN_USER_ID = 8072031254  # <--- ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®
BKASH_NUMBER = "01768991959" # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞
# -------------------------------------

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ (‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ) ---
SERVICES = {
    'facebook': {
        'name': 'Facebook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π üë§', # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        'items': { # ‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏
            'fb_star_gift': {
                'name': 'Facebook - Star‚≠êGift Unlimited (ID: 2626)',
                'price_per_1000': 2838.0, 
                'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßá‡¶ú/‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶ü‡¶ø‡¶§‡ßá ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§'
            },
            'fb_love_react': {
                'name': 'Facebook - Post Reaction ~ Love ‚ù§Ô∏è (ID: 2040)',
                'price_per_1000': 50.0, 
                'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶ü‡¶ø‡¶§‡ßá Love ‡¶∞‡¶ø‡ßü‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§'
            },
            'fb_like_react': { 'name': 'Facebook - Post Likes üëç (ID: 2039)', 'price_per_1000': 50.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'fb_wow_react': { 'name': 'Facebook - Post Reaction ~ wow üòÆ (ID: 2041)', 'price_per_1000': 50.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'fb_care_react': { 'name': 'Facebook - Post Reaction ~ care ü•∞ (ID: 2042)', 'price_per_1000': 50.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'fb_haha_react': { 'name': 'Facebook - Post Reaction ~ haha üòÇ (ID: 2043)', 'price_per_1000': 50.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' }
        }
    },
    'tiktok': {
        'name': 'TikTok ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π üéµ', # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        'items': { # ‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏
            'tt_like': { 'name': 'TikTok Likes ‚ù§Ô∏è', 'price_per_1000': 10.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'tt_view': { 'name': 'TikTok Views üëÅÔ∏è', 'price_per_1000': 7.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'tt_follower': { 'name': 'TikTok Followers üë•', 'price_per_1000': 170.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ TikTok ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' }
        }
    },
    'telegram': {
        'name': 'Telegram ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶∏‡¶Æ‡ßÇ‡¶π üöÄ', # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
        'items': { # ‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏
            'tg_sub': { 'name': 'Telegram Channel Subscriber (3 day) üöÄ', 'price_per_1000': 5.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶® (e.g., t.me/channelname)‡•§' },
            'tg_member': { 'name': 'Telegram Group Member üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'price_per_1000': 7.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶® (Public Group)‡•§' },
            'tg_premium': { 'name': 'Telegram Premium Member ‚≠ê', 'price_per_1000': 300.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™/‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§' },
            'tg_post_view': { 'name': 'Telegram Post Views (Last 1 Post) üëÅÔ∏è‚Äçüó®Ô∏è', 'price_per_1000': 2.0, 'link_prompt': '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶® (‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßá‡¶∑ ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá ‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡¶¨)‡•§' }
        }
    }
}
# -----------------------------------------

# Conversation states ‡¶¨‡¶æ ‡¶ß‡¶æ‡¶™ (‡¶è‡¶ï‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™ ‡¶¨‡ßá‡ßú‡ßá‡¶õ‡ßá)
SELECT_CATEGORY, SELECT_SERVICE, QUANTITY, LINK, PAYMENT = range(5)

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø SMM ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡¶ü‡•§ ü§ñ\n"
        "‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá /order ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§"
    )

# /order ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° (‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ)
async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    keyboard = []
    # SERVICES ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    for key, info in SERVICES.items():
        button = [InlineKeyboardButton(info['name'], callback_data=key)]
        keyboard.append(button)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
        reply_markup=reply_markup
    )
    
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™: ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    return SELECT_CATEGORY

# ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞
async def category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡ßü"""
    query = update.callback_query
    await query.answer() 
    
    category_key = query.data
    
    # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
    context.user_data['selected_category'] = category_key 
    
    # ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    keyboard = []
    category_items = SERVICES[category_key]['items']
    for service_key, service_info in category_items.items():
        button = [InlineKeyboardButton(service_info['name'], callback_data=service_key)]
        keyboard.append(button)
    
    # ‡¶è‡¶ï‡¶ü‡¶ø "Back" ‡¶¨‡¶æ‡¶ü‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    keyboard.append([InlineKeyboardButton("üîô ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶® (‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø)", callback_data='go_back_category')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"‡¶Ü‡¶™‡¶®‡¶ø **{SERVICES[category_key]['name']}** ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n"
             "‡¶è‡¶ñ‡¶® ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    return SELECT_SERVICE

# ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞
async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡ßü"""
    query = update.callback_query
    await query.answer() 
    
    service_key = query.data
    
    # ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ "‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá
    if service_key == 'go_back_category':
        # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
        await order_start(query, context) # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá query.message ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá query ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
        # ‡¶§‡¶¨‡ßá order_start ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø update.message ‡¶Ü‡¶∂‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶á query.message ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã
        # ‡¶Ö‡¶•‡¶¨‡¶æ order_start ‡¶ï‡ßá query.message ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
        # ‡¶∏‡¶π‡¶ú ‡¶â‡¶™‡¶æ‡ßü ‡¶π‡¶≤‡ßã order_start ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ‡•§
        keyboard = []
        for key, info in SERVICES.items():
            button = [InlineKeyboardButton(info['name'], callback_data=key)]
            keyboard.append(button)
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=reply_markup
        )
        return SELECT_CATEGORY # ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ


    try:
        category_key = context.user_data['selected_category']
        service_info = SERVICES[category_key]['items'][service_key]
    except KeyError:
        logger.warning(f"‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø={context.user_data.get('selected_category')}, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏={service_key}")
        await query.edit_message_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /order ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        context.user_data.clear()
        return ConversationHandler.END

    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßÄ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
    context.user_data['service'] = service_info
    
    await query.edit_message_text(
        text=f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: **{service_info['name']}**\n"
             f"‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø: ‡ß≥{service_info['price_per_1000']} (‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ßß‡ß¶‡ß¶‡ß¶)\n\n"
             "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: 1000, 2000)‡•§\n\n"
             "‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá /cancel ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§",
        parse_mode=ParseMode.MARKDOWN
    )
    # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™: ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶ú‡¶æ‡¶®‡¶æ
    return QUANTITY

# ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¨‡¶æ Quantity ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞
async def quantity_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ö‡¶æ‡ßü"""
    try:
        quantity = int(update.message.text)
        if quantity < 1:
            await update.message.reply_text("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ 1 ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return QUANTITY

        service_info = context.user_data['service']
        price_per_1000 = service_info['price_per_1000']
        
        price = (quantity / 1000) * price_per_1000
        
        context.user_data['quantity'] = quantity
        context.user_data['price'] = price
        
        link_prompt = service_info['link_prompt'] 
        
        await update.message.reply_text(
            f"‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {quantity}\n"
            f"‡¶Æ‡ßã‡¶ü ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú: ‡ß≥{price:,.2f}\n\n" 
            f"{link_prompt}" 
        )
        return LINK
    except ValueError:
        await update.message.reply_text("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: 1000)‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return QUANTITY
    except KeyError:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /order ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        context.user_data.clear()
        return ConversationHandler.END

# ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞
async def link_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶≤‡ßá"""
    link = update.message.text
    context.user_data['link'] = link
    
    try:
        service_info = context.user_data['service']
        quantity = context.user_data['quantity']
        price = context.user_data['price']
    except KeyError:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /order ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        context.user_data.clear()
        return ConversationHandler.END

    await update.message.reply_text(
        f"‚úÖ **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:**\n"
        f"------------------------------\n"
        f"**‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏:** {service_info['name']}\n"
        f"**‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£:** {quantity}\n"
        f"**‡¶≤‡¶ø‡¶ô‡ßç‡¶ï:** {link}\n"
        f"**‡¶Æ‡ßã‡¶ü ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú:** ‡ß≥{price:,.2f}\n"
        f"------------------------------\n\n"
        f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡ß≥{price:,.2f} ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        f"**‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ (‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶≤):** `{BKASH_NUMBER}`\n\n"
        "(‡¶¶‡ßã‡¶ï‡¶æ‡¶®/‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂-‡¶á‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶Æ‡¶æ‡¶®‡¶ø ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®)\n\n"
        "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá **‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø (TrxID)** ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø **‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü** ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§",
        parse_mode=ParseMode.MARKDOWN
    )
    return PAYMENT

# ‡¶ß‡¶æ‡¶™ ‡ß´: ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡ßÅ‡¶´ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶™‡¶∞ (‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶ß‡¶æ‡¶™)
async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, payment_proof_text: str, photo_file_id: str = None) -> int:
    """‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡ßü ‡¶è‡¶¨‡¶Ç ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ ‡¶ï‡¶∞‡ßá"""
    user = update.effective_user
    
    try:
        service_info = context.user_data.get('service', {})
        quantity = context.user_data.get('quantity', 'N/A')
        price = context.user_data.get('price', 0)
        link = context.user_data.get('link', 'N/A')
        service_name = service_info.get('name', 'N/A')
    except KeyError:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá /order ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        context.user_data.clear()
        return ConversationHandler.END

    await update.message.reply_text(
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø‡¶ü‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø‡•§ ‚úÖ\n"
        "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶ü‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ï‡¶Æ‡ßç‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßá‡•§\n"
        "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!"
    )

    user_details = f"‡¶®‡¶æ‡¶Æ: {user.full_name}"
    if user.username:
        user_details += f"\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ: @{user.username}"
    user_details += f"\n‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: `{user.id}`"

    admin_message = (
        f"üö® **‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶è‡¶∏‡ßá‡¶õ‡ßá!** üö®\n\n"
        f"**‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:**\n{user_details}\n\n"
        f"**‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:**\n"
        f"‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏: **{service_name}**\n"
        f"‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {quantity}\n"
        f"‡¶ö‡¶æ‡¶∞‡ßç‡¶ú: ‡ß≥{price:,.2f}\n"
        f"‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: {link}\n\n"
        f"**‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø:**\n"
        f"{payment_proof_text}"
    )

    try:
        if photo_file_id:
            await context.bot.send_photo( chat_id=ADMIN_USER_ID, photo=photo_file_id, caption=admin_message, parse_mode=ParseMode.MARKDOWN )
        else:
            await context.bot.send_message( chat_id=ADMIN_USER_ID, text=admin_message, parse_mode=ParseMode.MARKDOWN )
    except Exception as e:
        logger.error(f"‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
        await context.bot.send_message( chat_id=ADMIN_USER_ID, text=f"‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶´‡ßá‡¶á‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: {user.id}" )

    context.user_data.clear()
    return ConversationHandler.END

# ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ TrxID ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡ßü
async def payment_received_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    trx_id = update.message.text
    payment_proof = f"TrxID: `{trx_id}`"
    return await process_payment(update, context, payment_proof)

# ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü (‡¶õ‡¶¨‡¶ø) ‡¶™‡¶æ‡¶†‡¶æ‡ßü
async def payment_received_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    photo: PhotoSize = update.message.photo[-1]
    payment_proof = "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡¶∂‡¶ü (‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®)"
    return await process_payment(update, context, payment_proof, photo_file_id=photo.file_id)

# /cancel ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßá"""
    if update.callback_query:
        await update.callback_query.edit_message_text("‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else:
        await update.message.reply_text("‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        
    context.user_data.clear()
    return ConversationHandler.END

# ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # Conversation Handler ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ (‡¶è‡¶ñ‡¶® ‡ß´‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("order", order_start)],
        states={
            # ‡¶ß‡¶æ‡¶™ ‡ß¶: ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
            SELECT_CATEGORY: [CallbackQueryHandler(category_selected)],
            # ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
            SELECT_SERVICE: [CallbackQueryHandler(service_selected)],
            # ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶≤‡ßá‡¶ñ‡¶æ
            QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_received)],
            # ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶≤‡ßá‡¶ñ‡¶æ
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, link_received)],
            # ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡ßÅ‡¶´ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
            PAYMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, payment_received_text),
                MessageHandler(filters.PHOTO, payment_received_photo)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    
    print("‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶∏‡¶π ‡¶Ü‡¶™‡¶ó‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶° ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... (‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá Ctrl+C ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®)")
    
    application.run_polling()

if __name__ == '__main__':
    main()
